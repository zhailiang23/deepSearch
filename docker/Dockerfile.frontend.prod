# 多阶段构建 - 构建阶段
FROM node:20-alpine as builder

# 设置工作目录
WORKDIR /app

# 安装依赖 - 先复制package文件以利用Docker缓存
COPY package*.json ./
RUN npm ci --only=production

# 复制源代码并构建
COPY . .
RUN npm run build

# 生产阶段 - 优化的Nginx镜像
FROM nginx:1.25-alpine-slim

# 安装安全更新和必要工具
RUN apk update && \
    apk add --no-cache \
    curl \
    ca-certificates && \
    apk upgrade && \
    rm -rf /var/cache/apk/*

# 创建非root用户
RUN addgroup -g 1001 -S appgroup && \
    adduser -S -D -H -u 1001 -h /var/cache/nginx -s /sbin/nologin -G appgroup -g appgroup appuser

# 移除默认Nginx配置
RUN rm /etc/nginx/conf.d/default.conf

# 复制自定义Nginx配置
COPY docker/nginx/nginx.prod.conf /etc/nginx/nginx.conf
COPY docker/nginx/default.prod.conf /etc/nginx/conf.d/default.conf

# 复制构建产物
COPY --from=builder --chown=appuser:appgroup /app/dist /usr/share/nginx/html

# 设置正确的文件权限
RUN chmod -R 755 /usr/share/nginx/html && \
    chown -R appuser:appgroup /usr/share/nginx/html && \
    chown -R appuser:appgroup /var/cache/nginx && \
    chown -R appuser:appgroup /var/log/nginx && \
    chown -R appuser:appgroup /etc/nginx/conf.d && \
    touch /var/run/nginx.pid && \
    chown appuser:appgroup /var/run/nginx.pid

# 创建临时目录
RUN mkdir -p /tmp/nginx && \
    chown -R appuser:appgroup /tmp/nginx

# 切换到非root用户
USER appuser

# 健康检查
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# 暴露端口
EXPOSE 8080

# 启动命令
CMD ["nginx", "-g", "daemon off;"]