version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: mgmt-postgres-dev
    environment:
      POSTGRES_DB: mgmt_db
      POSTGRES_USER: mgmt_user
      POSTGRES_PASSWORD: mgmt_password
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
      - ./docker/postgres/postgresql.conf:/etc/postgresql/postgresql.conf
    ports:
      - "5432:5432"
    networks:
      - mgmt-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mgmt_user -d mgmt_db"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  redis:
    image: redis:7-alpine
    container_name: mgmt-redis-dev
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/etc/redis/redis.conf
    ports:
      - "6379:6379"
    networks:
      - mgmt-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: redis-server /etc/redis/redis.conf

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: mgmt-backend-dev
    environment:
      SPRING_PROFILES_ACTIVE: dev
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: mgmt_db
      DB_USERNAME: mgmt_user
      DB_PASSWORD: mgmt_password
      REDIS_HOST: redis
      REDIS_PORT: 6379
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - mgmt-network
    volumes:
      - ./backend/logs:/app/logs
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: mgmt-frontend-dev
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - mgmt-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  mgmt-network:
    driver: bridge