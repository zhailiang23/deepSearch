services:
  mysql:
    image: mysql:8.0
    container_name: mgmt-mysql-dev
    environment:
      MYSQL_DATABASE: mgmt_db
      MYSQL_USER: mgmt_user
      MYSQL_PASSWORD: mgmt_password
      MYSQL_ROOT_PASSWORD: root_password
      TZ: Asia/Shanghai
    volumes:
      - mysql_data:/var/lib/mysql
    ports:
      - "3306:3306"
    networks:
      - mgmt-network
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "mgmt_user", "-pmgmt_password"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  redis:
    image: redis:7-alpine
    container_name: mgmt-redis-dev
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/etc/redis/redis.conf
    ports:
      - "6379:6379"
    networks:
      - mgmt-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: redis-server /etc/redis/redis.conf

  elasticsearch:
    build:
      context: ./docker/elasticsearch
      dockerfile: Dockerfile
    container_name: mgmt-elasticsearch-dev
    environment:
      - node.name=es-node-1
      - cluster.name=mgmt-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
      - xpack.security.http.ssl.enabled=false
      - xpack.security.transport.ssl.enabled=false
      - action.destructive_requires_name=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
      - ./docker/elasticsearch/pinyin-analyzer.json:/usr/share/elasticsearch/config/analysis/pinyin-analyzer.json
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - mgmt-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  semantic-embedding:
    build:
      context: ./docker/semantic-embedding
      dockerfile: Dockerfile
    container_name: mgmt-semantic-embedding-dev
    environment:
      - PYTHONUNBUFFERED=1
      - LOG_LEVEL=INFO
    volumes:
      - semantic_logs:/app/logs
    ports:
      - "8001:8001"
    networks:
      - mgmt-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: mgmt-backend-dev
    environment:
      SPRING_PROFILES_ACTIVE: dev
      DB_HOST: mysql
      DB_PORT: 3306
      DB_NAME: mgmt_db
      DB_USERNAME: mgmt_user
      DB_PASSWORD: mgmt_password
      REDIS_HOST: redis
      REDIS_PORT: 6379
      ELASTICSEARCH_URI: http://elasticsearch:9200
      SEARCH_LOG_ENABLED: true
      SEARCH_LOG_RETENTION_DAYS: 30
      SEARCH_LOG_MONITOR_ENABLED: true
      SEMANTIC_EMBEDDING_SERVICE_URL: http://semantic-embedding:8001
      SEMANTIC_EMBEDDING_ENABLED: true
      SEMANTIC_SEARCH_WEIGHT: 0.3
    ports:
      - "8080:8080"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      semantic-embedding:
        condition: service_healthy
    networks:
      - mgmt-network
    volumes:
      - ./backend/logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/search-logs/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: mgmt-frontend-dev
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - mgmt-network
    restart: unless-stopped

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local
  semantic_logs:
    driver: local

networks:
  mgmt-network:
    driver: bridge